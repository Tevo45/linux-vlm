/************************************************************************
 * WARNING: DO NOT EDIT THIS FILE.  THIS FILE WAS AUTOMATICALLY GENERATED
 * FROM ../alpha-emulator/ifunfull.as. ANY CHANGES MADE TO THIS FILE WILL BE LOST
 ************************************************************************/

/* The full word instructions */
.align 5
.globl DoIStageError
.ent DoIStageError 0
/* Fullword instruction - DoIStageError */
#ifdef TRACING
	.byte 0x80
	.asciiz "DoIStageError"
#endif
.align 3
DoIStageError:
        bis	$31, 0, $20 	# [1]
        bis	$31, 38, $17 	# [1]
	br	$31, ILLEGALOPERAND
.end DoIStageError
/* End of Fullword instruction - DoIStageError */
.align 5
.globl nullfw
.ent nullfw 0
/* Fullword instruction - nullfw */
#ifdef TRACING
	.byte 0x80
	.asciiz "nullfw"
#endif
.align 3
nullfw:
        bis	$31, 0, $20 	# [1]
        bis	$31, 47, $17 	# [1]
	br	$31, ILLEGALOPERAND
.end nullfw
/* End of Fullword instruction - nullfw */
.align 5
.globl monitorforwardfw
.ent monitorforwardfw 0
/* Fullword instruction - monitorforwardfw */
#ifdef TRACING
	.byte 0x80
	.asciiz "monitorforwardfw"
#endif
.align 3
monitorforwardfw:
        bis	$31, 0, $20 	# [1]
        bis	$31, 46, $17 	# [1]
	br	$31, ILLEGALOPERAND
.end monitorforwardfw
/* End of Fullword instruction - monitorforwardfw */
.align 5
.globl headerpfw
.ent headerpfw 0
/* Fullword instruction - headerpfw */
#ifdef TRACING
	.byte 0x80
	.asciiz "headerpfw"
#endif
.align 3
headerpfw:
        bis	$31, 0, $20 	# [1]
        bis	$31, 44, $17 	# [1]
	br	$31, ILLEGALOPERAND
.end headerpfw
/* End of Fullword instruction - headerpfw */
.align 5
.globl headerifw
.ent headerifw 0
/* Fullword instruction - headerifw */
#ifdef TRACING
	.byte 0x80
	.asciiz "headerifw"
#endif
.align 3
headerifw:
        bis	$31, 0, $20 	# [1]
        bis	$31, 43, $17 	# [1]
	br	$31, ILLEGALOPERAND
.end headerifw
/* End of Fullword instruction - headerifw */
.align 5
.globl oneqforwardfw
.ent oneqforwardfw 0
/* Fullword instruction - oneqforwardfw */
#ifdef TRACING
	.byte 0x80
	.asciiz "oneqforwardfw"
#endif
.align 3
oneqforwardfw:
        bis	$31, 0, $20 	# [1]
        bis	$31, 48, $17 	# [1]
	br	$31, ILLEGALOPERAND
.end oneqforwardfw
/* End of Fullword instruction - oneqforwardfw */
.align 5
.globl headerforwardfw
.ent headerforwardfw 0
/* Fullword instruction - headerforwardfw */
#ifdef TRACING
	.byte 0x80
	.asciiz "headerforwardfw"
#endif
.align 3
headerforwardfw:
        bis	$31, 0, $20 	# [1]
        bis	$31, 42, $17 	# [1]
	br	$31, ILLEGALOPERAND
.end headerforwardfw
/* End of Fullword instruction - headerforwardfw */
.align 5
.globl elementforwardfw
.ent elementforwardfw 0
/* Fullword instruction - elementforwardfw */
#ifdef TRACING
	.byte 0x80
	.asciiz "elementforwardfw"
#endif
.align 3
elementforwardfw:
        bis	$31, 0, $20 	# [1]
        bis	$31, 40, $17 	# [1]
	br	$31, ILLEGALOPERAND
.end elementforwardfw
/* End of Fullword instruction - elementforwardfw */
.align 5
.globl gcforwardfw
.ent gcforwardfw 0
/* Fullword instruction - gcforwardfw */
#ifdef TRACING
	.byte 0x80
	.asciiz "gcforwardfw"
#endif
.align 3
gcforwardfw:
        bis	$31, 0, $20 	# [1]
        bis	$31, 41, $17 	# [1]
	br	$31, ILLEGALOPERAND
.end gcforwardfw
/* End of Fullword instruction - gcforwardfw */
.align 5
.globl boundlocationfw
.ent boundlocationfw 0
/* Fullword instruction - boundlocationfw */
#ifdef TRACING
	.byte 0x80
	.asciiz "boundlocationfw"
#endif
.align 3
boundlocationfw:
        bis	$31, 0, $20 	# [1]
        bis	$31, 39, $17 	# [1]
	br	$31, ILLEGALOPERAND
.end boundlocationfw
/* End of Fullword instruction - boundlocationfw */
.align 5
.globl logicvariablefw
.ent logicvariablefw 0
/* Fullword instruction - logicvariablefw */
#ifdef TRACING
	.byte 0x80
	.asciiz "logicvariablefw"
#endif
.align 3
logicvariablefw:
        bis	$31, 0, $20 	# [1]
        bis	$31, 45, $17 	# [1]
	br	$31, ILLEGALOPERAND
.end logicvariablefw
/* End of Fullword instruction - logicvariablefw */
.align 5
.globl pushsparepointer3
.ent pushsparepointer3 0
/* Fullword instruction - pushsparepointer3 */
#ifdef TRACING
	.byte 0x80
	.asciiz "pushsparepointer3"
#endif
.align 3
pushsparepointer3:
        ldq	$16, CACHELINE_INSTRUCTION($13)	# Get operand [1-]
/* This instruction has not been written yet. */
        bis	$31, 0, $20 	# [0di]
        bis	$31, 38, $17 	# [1]
	br	$31, ILLEGALOPERAND
.end pushsparepointer3
/* End of Fullword instruction - pushsparepointer3 */
.align 5
.globl pushsparepointer4
.ent pushsparepointer4 0
/* Fullword instruction - pushsparepointer4 */
#ifdef TRACING
	.byte 0x80
	.asciiz "pushsparepointer4"
#endif
.align 3
pushsparepointer4:
        ldq	$16, CACHELINE_INSTRUCTION($13)	# Get operand [1-]
/* This instruction has not been written yet. */
        bis	$31, 0, $20 	# [0di]
        bis	$31, 38, $17 	# [1]
	br	$31, ILLEGALOPERAND
.end pushsparepointer4
/* End of Fullword instruction - pushsparepointer4 */
.globl callcompiledoddprefetch
.align 5
.globl callcompiledodd
.ent callcompiledodd 0
/* Fullword instruction - callcompiledodd */
#ifdef TRACING
	.byte 0x80
	.asciiz "callcompiledodd"
#endif
.align 3
callcompiledodd:
.align 3
callcompiledoddprefetch:
        bis	$18, $31, $21 	# Get operand [1]
        bis	$31, TypeOddPC, $20 	# [1]
        bis	$31, $31, $18 	# No extra arg [1]
        br	$31, STARTCALLCOMPILEDMERGE	# [0di]
.end callcompiledodd
/* End of Fullword instruction - callcompiledodd */
.align 5
.globl nativeinstruction
.ent nativeinstruction 0
/* Fullword instruction - nativeinstruction */
#ifdef TRACING
	.byte 0x80
	.asciiz "nativeinstruction"
#endif
.align 3
nativeinstruction:
        bic	$9, 1, $16 	# arg1 is instruction address*2 here [1-]
        addq	$16, $16, $16 	# Select the DATA address [1]
        s4addq	$14, $16, $16 	# Add in the memory base [1]
        jsr	$0, ($16), 0	# Jump into the Ivory code [2]
.end nativeinstruction
/* End of Fullword instruction - nativeinstruction */
.align 5
.globl resumeemulated
.ent resumeemulated 0
.align 3
resumeemulated:
        ldq	$17, CACHELINE_ANNOTATION($13)	#  [1]
        s4subq	$14, $16, $9 	# [0di]
        subq	$31, $9, $9 	# [1]
        srl	$9, 1, $9 	# [1]
        bne	$17, INTERPRETINSTRUCTIONPREDICTED	# [1-]
        br	$31, INTERPRETINSTRUCTIONFORBRANCH	# [1]
.end resumeemulated
/* Fin. */


/* End of file automatically generated from ../alpha-emulator/ifunfull.as */
